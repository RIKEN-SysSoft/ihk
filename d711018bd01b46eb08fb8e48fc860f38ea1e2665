{
  "comments": [
    {
      "key": {
        "uuid": "0acd9f8f_41a38b4b",
        "filename": "ikc/include/ikc/msg.h",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2018-10-21T03:54:37Z",
      "side": 1,
      "message": "make that field ihk_ikc_packet, so it\u0027s a bit more \"future-proof\"?",
      "revId": "d711018bd01b46eb08fb8e48fc860f38ea1e2665",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "929d5726_64cfc872",
        "filename": "ikc/include/ikc/msg.h",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1014590
      },
      "writtenOn": "2018-10-24T02:57:27Z",
      "side": 1,
      "message": "This packet is for master channel, and the super-class is defined in queue.h.",
      "parentUuid": "0acd9f8f_41a38b4b",
      "revId": "d711018bd01b46eb08fb8e48fc860f38ea1e2665",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc494c55_6ff578ed",
        "filename": "ikc/queue.c",
        "patchSetId": 1
      },
      "lineNbr": 470,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2018-10-21T03:54:37Z",
      "side": 1,
      "message": "hmm, logically I\u0027d feel more at ease if channel was set in ihk_ikc_alloc_packet, and just making sure ihk_ikc_read_queue doesn\u0027t overwrite the channel.\nIf, instead of embedding the \"super\" ihk_ikc_packet you make it into two different structs it should be clean enough; e.g. ihk_ikc_packet would become:\n\n struct ihk_ikc_packet {\n  struct ihk_ikc_channel_descs *channel;\n  char payload[0];\n }\n\nThen use that type instead of void * for the inner handling, and use p-\u003epayload for the memcpy.\n\nThought?",
      "revId": "d711018bd01b46eb08fb8e48fc860f38ea1e2665",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6afa8db8_9ca515da",
        "filename": "ikc/queue.c",
        "patchSetId": 1
      },
      "lineNbr": 470,
      "author": {
        "id": 1014590
      },
      "writtenOn": "2018-10-24T02:57:27Z",
      "side": 1,
      "message": "Discussion result:\n* Setting on receiving is better because the redundant copy overhead is small.\n* Use the class inheritance technique used in fileobj.c etc",
      "parentUuid": "fc494c55_6ff578ed",
      "revId": "d711018bd01b46eb08fb8e48fc860f38ea1e2665",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e72bcde9_60048107",
        "filename": "ikc/queue.c",
        "patchSetId": 1
      },
      "lineNbr": 470,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2018-10-24T03:19:44Z",
      "side": 1,
      "message": "\u003e Discussion result:\n\u003e * Setting on receiving is better because the redundant copy overhead is small.\n\nWhat about packets we send without receiving?\nE.g. sometimes on mckernel side we allocate a packet, send it, and free it without waiting for the answer.\nWe need to at least initialize it in alloc as well just to be safe.",
      "parentUuid": "6afa8db8_9ca515da",
      "revId": "d711018bd01b46eb08fb8e48fc860f38ea1e2665",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}